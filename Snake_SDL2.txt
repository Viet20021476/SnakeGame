#include <SDL.h>
#include <SDL_image.h>
#include <SDL_ttf.h>
#include <SDL_mixer.h>
#include <iostream>
#include <ctime>
#include <string>


#define SCREEN_WIDTH 1200
#define SCREEN_HEIGHT 800

using namespace std;

enum class STATE { UP, DOWN, LEFT, RIGHT };

struct Food
{
	SDL_Rect td;
};

struct BigFood
{
	SDL_Rect bf;
};

struct Snake
{
	SDL_Rect dot[30000];
	SDL_Rect t;
	int length;
	STATE tt;
};

void LoadEatingSound()
{
	Mix_Chunk* soundEffect = Mix_LoadWAV("EatingSound.wav");
	Mix_PlayChannel(-1, soundEffect, 0);
}

void motionSound()
{
	Mix_Chunk* soundEffect = Mix_LoadWAV("mou.wav");
	Mix_PlayChannel(-1, soundEffect, 0);
}


int showMenu(SDL_Renderer* renderer)
{
	bool menu_running = true;
	SDL_Event event;
	const int menuItem = 2;
	SDL_Surface* menus[menuItem];
	SDL_Rect pos_a[menuItem];

	pos_a[0].x = 500;
	pos_a[0].y = 300;
	pos_a[1].x = 500;
	pos_a[1].y = 400;

	SDL_Color color[2] = { {255,255,255},{255,0,0} };
	TTF_Font* font = TTF_OpenFont("39335_UniversCondensed.ttf", 50);

	while (menu_running)
	{
		while (SDL_PollEvent(&event))
		{
			if (event.type == SDL_QUIT)
			{
				menu_running = false;
				return -1;
			}

			else if (event.type == SDL_MOUSEMOTION)
			{
				if (event.button.x >= 500 && event.button.x <= 650 && event.button.y >= 300 && event.button.y <= 350)
				{
					motionSound();
					menus[0] = TTF_RenderText_Solid(font, "Play", color[1]);
				}
				else menus[0] = TTF_RenderText_Solid(font, "Play", color[0]);

				if (event.button.x >= 500 && event.button.x <= 650 && event.button.y >= 400 && event.button.y <= 450)
				{
					motionSound();
					menus[1] = TTF_RenderText_Solid(font, "Exit", color[1]);
				}
				else menus[1] = TTF_RenderText_Solid(font, "Exit", color[0]);
			}
			else if (event.type == SDL_MOUSEBUTTONDOWN)
			{
				if (event.button.x >= 500 && event.button.x <= 650 && event.button.y >= 300 && event.button.y <= 350) menu_running = false;
				else if (event.button.x >= 500 && event.button.x <= 650 && event.button.y >= 400 && event.button.y <= 450)
				{
					menu_running = false;
					return -1;
				}
			}
		}
		SDL_RenderPresent(renderer);
		SDL_Texture* playMessage = SDL_CreateTextureFromSurface(renderer, menus[0]);
		SDL_Texture* exitMessage = SDL_CreateTextureFromSurface(renderer, menus[1]);
		SDL_Rect playRect, exitRect;
		playRect.w = exitRect.w = 150;
		playRect.h = exitRect.h = 50;
		playRect.x = pos_a[0].x;
		playRect.y = pos_a[0].y;
		exitRect.x = pos_a[1].x;
		exitRect.y = pos_a[1].y;
		SDL_RenderCopy(renderer, playMessage, NULL, &playRect);
		SDL_RenderCopy(renderer, exitMessage, NULL, &exitRect);
	}
}

int showEnd(SDL_Renderer* renderer, int snakelength)
{
	SDL_Color color[3] = { {255,255,255},{255,0,0}, {100,100,100} };
	TTF_Font* font = TTF_OpenFont("39335_UniversCondensed.ttf", 50);
	SDL_Event event;
	bool end_running = true;
	const int menuItem = 2;
	SDL_Surface* menus[menuItem];
	SDL_Surface* gameover = TTF_RenderText_Solid(font, "Game Over", color[2]);
	SDL_Surface* score = TTF_RenderText_Solid(font, (("Your score: ") + to_string(snakelength)).c_str(), color[2]);

	while (end_running)
	{
		while (SDL_PollEvent(&event))
		{
			if (event.type == SDL_QUIT)
			{
				end_running = false;
			}

			else if (event.type == SDL_MOUSEMOTION)
			{
				if (event.button.x >= 500 && event.button.x <= 650 && event.button.y >= 600 && event.button.y <= 650)
				{
					menus[0] = TTF_RenderText_Solid(font, "Play Again", color[1]);
				}
				else menus[0] = TTF_RenderText_Solid(font, "Play Again", color[0]);

				if (event.button.x >= 500 && event.button.x <= 575 && event.button.y >= 650 && event.button.y <= 700)
				{
					menus[1] = TTF_RenderText_Solid(font, "Exit", color[1]);
				}
				else menus[1] = TTF_RenderText_Solid(font, "Exit", color[0]);
			}
			else if (event.type == SDL_MOUSEBUTTONDOWN)
			{
				if (event.button.x >= 500 && event.button.x <= 650 && event.button.y >= 600 && event.button.y <= 650) end_running = false;
				else if (event.button.x >= 500 && event.button.x <= 575 && event.button.y >= 650 && event.button.y <= 700)
				{
					end_running = false;
					return 1;

				}
			}
		}

		SDL_RenderPresent(renderer);
		SDL_Texture* playagainMessage = SDL_CreateTextureFromSurface(renderer, menus[0]);
		SDL_Texture* exitMessage = SDL_CreateTextureFromSurface(renderer, menus[1]);
		SDL_Texture* gameoverMessage = SDL_CreateTextureFromSurface(renderer, gameover);
		SDL_Texture* scoreMessage = SDL_CreateTextureFromSurface(renderer, score);

		SDL_Rect playagainRect, exitRect, gameoverRect, scoreRect;
		playagainRect.w = 150;
		playagainRect.h = exitRect.h = 50;
		exitRect.w = 75;
		playagainRect.x = 500;
		playagainRect.y = 600;
		exitRect.x = 500;
		exitRect.y = 650;
		gameoverRect.x = 350;
		gameoverRect.y = 150;
		gameoverRect.w = 500;
		gameoverRect.h = 200;
		scoreRect.x = 470;
		scoreRect.y = 320;
		scoreRect.w = 250;
		scoreRect.h = 100;


		SDL_RenderCopy(renderer, playagainMessage, NULL, &playagainRect);
		SDL_RenderCopy(renderer, exitMessage, NULL, &exitRect);
		SDL_RenderCopy(renderer, gameoverMessage, NULL, &gameoverRect);
		SDL_RenderCopy(renderer, scoreMessage, NULL, &scoreRect);


	}
}
void renderScore(SDL_Renderer* renderer, int snakelength)
{
	SDL_Color Yellow = { 255,255,0 };
	TTF_Font* font = TTF_OpenFont("39335_UniversCondensed.ttf", 50);
	if (font == NULL)
	{
		cout << "Font loading error: " << TTF_GetError() << endl;
		return;
	}
	SDL_Surface* score = TTF_RenderText_Solid(font, (("Score: ") + to_string(snakelength)).c_str(), Yellow);
	SDL_Texture* scoreMessage = SDL_CreateTextureFromSurface(renderer, score);
	SDL_Rect scoreRect;
	scoreRect.w = 150;
	scoreRect.h = 50;
	scoreRect.x = 50;
	scoreRect.y = 200;
	SDL_RenderCopy(renderer, scoreMessage, NULL, &scoreRect);

	TTF_CloseFont(font);
}

void renderTime(SDL_Renderer* renderer)
{
	int hour = 0;
	int minute = 0;
	int second = 0;
	string TimePassed = "";
	Uint32 timeval = SDL_GetTicks() / 1000;
	hour = timeval / 3600;
	minute = (timeval - (hour * 3600)) / 60;
	second = timeval - (hour * 3600) - (minute * 60);

	TimePassed = "Time " + to_string(hour) + ':' + to_string(minute) + ":" + to_string(second);

	SDL_Color Yellow = { 255,255,0 };
	TTF_Font* font = TTF_OpenFont("39335_UniversCondensed.ttf", 50);
	if (font == NULL)
	{
		cout << "Font loading error: " << TTF_GetError() << endl;
		return;
	}
	SDL_Surface* time = TTF_RenderText_Solid(font, TimePassed.c_str(), Yellow);
	SDL_Texture* timeC = SDL_CreateTextureFromSurface(renderer, time);
	SDL_Rect timeRect;
	timeRect.w = 170;
	timeRect.h = 50;
	timeRect.x = 50;
	timeRect.y = 270;
	SDL_RenderCopy(renderer, timeC, NULL, &timeRect);
	TTF_CloseFont(font);
}

void LoadBackGroundMusic(Mix_Music* bgm)
{
	if (!Mix_PlayingMusic()) Mix_PlayMusic(bgm, -1);
}

void LoadBackGround(SDL_Surface* screen, SDL_Surface* image, SDL_Window* window, string filepath)
{
	screen = SDL_GetWindowSurface(window);
	image = IMG_Load(filepath.c_str());
	SDL_BlitSurface(image, NULL, screen, NULL);
	SDL_UpdateWindowSurface(window);
}

void Initialize(Snake& snake, Food& food, BigFood& bigfood)
{
	snake.length = 1;
	snake.dot[0].x = 400;
	snake.dot[0].y = 450;
	snake.dot[0].w = 10;
	snake.dot[0].h = 10;

	snake.tt = STATE::RIGHT;
	food.td.x = 300;
	food.td.y = 300;
	food.td.w = 10;
	food.td.h = 10;

	bigfood.bf.x = 550;
	bigfood.bf.y = 550;
	bigfood.bf.w = 30;
	bigfood.bf.h = 30;
}

void Display(Snake snake, Food food, BigFood& bigfood, SDL_Renderer* renderer)
{
	SDL_Rect rect, rect1, rect2;
	Uint32 timeval = SDL_GetTicks() / 1000;
	rect.x = 250;
	rect.y = 150;
	rect.w = 800;
	rect.h = 500;
	rect1.x = 251;
	rect1.y = 151;
	rect1.w = 800;
	rect1.h = 500;
	rect2.x = 252;
	rect2.y = 152;
	rect2.w = 800;
	rect2.h = 500;
	SDL_Surface* screen = NULL;
	SDL_Surface* image = NULL;

	SDL_SetRenderDrawColor(renderer, 0, 0, 255, 255);
	SDL_RenderFillRect(renderer, &food.td);

	/*if ((snake.length - 1) % 50 == 0)
	{



			bigfood.bf.x = 250 + rand() % 680;
			bigfood.bf.y = 150 + rand() % 400;
			cout << bigfood.bf.x << " " << bigfood.bf.y << endl;



	}*/
	int m, n, p;
	m = rand() % 255;
	n = rand() % 255;
	p = rand() % 255;
	SDL_SetRenderDrawColor(renderer, m, n, p, 255);
	SDL_RenderFillRect(renderer, &bigfood.bf);

	SDL_SetRenderDrawColor(renderer, 0, 255, 100, 255);

	for (int i = 0; i < snake.length; i++)
	{
		SDL_RenderFillRect(renderer, &snake.dot[i]);
	}


	SDL_SetRenderDrawColor(renderer, 255, 0, 255, 255);
	SDL_RenderDrawRect(renderer, &rect);
	SDL_RenderDrawRect(renderer, &rect1);
	SDL_RenderDrawRect(renderer, &rect2);
	SDL_RenderDrawLine(renderer, 250, 0, 250, 800);
	SDL_RenderDrawLine(renderer, 251, 0, 251, 801);
	SDL_RenderDrawLine(renderer, 252, 0, 252, 802);
	SDL_RenderPresent(renderer);
}

void Move(Snake& snake, SDL_Event event)
{

	for (int i = snake.length - 1; i > 0; i--)
	{
		snake.dot[i] = snake.dot[i - 1];
	}

	if (event.type == SDL_KEYDOWN)
	{
		switch (event.key.keysym.sym)
		{
		case SDLK_UP:
			snake.tt = STATE::UP;
			break;
		case SDLK_DOWN:
			snake.tt = STATE::DOWN;
			break;
		case SDLK_LEFT:
			snake.tt = STATE::LEFT;
			break;
		case SDLK_RIGHT:
			snake.tt = STATE::RIGHT;
			break;
		}
	}

	if (snake.tt == STATE::UP) snake.dot[0].y--;
	else if (snake.tt == STATE::DOWN) snake.dot[0].y++;
	else if (snake.tt == STATE::LEFT) snake.dot[0].x--;
	else if (snake.tt == STATE::RIGHT) snake.dot[0].x++;
}

int Handle(Snake& snake, Food& food, BigFood& bigfood, SDL_Renderer* renderer)
{

	if (abs(snake.dot[0].x - food.td.x) <= 10 && abs(snake.dot[0].y - food.td.y) <= 10)
	{
		LoadEatingSound();
		snake.length += 10;

		for (int i = snake.length - 1; i > 0; i--)
		{
			snake.dot[i] = snake.dot[i - 1];
		}

		if (snake.tt == STATE::UP) snake.dot[0].y--;
		else if (snake.tt == STATE::DOWN) snake.dot[0].y++;
		else if (snake.tt == STATE::LEFT) snake.dot[0].x--;
		else if (snake.tt == STATE::RIGHT) snake.dot[0].x++;

		food.td.x = 250 + rand() % 780;
		food.td.y = 150 + rand() % 480;
	}

	if (abs(snake.dot[0].x - bigfood.bf.x) <= 25 && abs(snake.dot[0].y - bigfood.bf.y) <= 25)
	{
		LoadEatingSound();
		snake.length += 30;

		for (int i = snake.length - 1; i > 0; i--)
		{
			snake.dot[i] = snake.dot[i - 1];
		}

		if (snake.tt == STATE::UP) snake.dot[0].y--;
		else if (snake.tt == STATE::DOWN) snake.dot[0].y++;
		else if (snake.tt == STATE::LEFT) snake.dot[0].x--;
		else if (snake.tt == STATE::RIGHT) snake.dot[0].x++;

		bigfood.bf.x = 250 + rand() % 680;
		bigfood.bf.y = 150 + rand() % 400;
	}

	if (snake.dot[0].x == 250 || snake.dot[0].y == 150 || snake.dot[0].x == 1040 || snake.dot[0].y == 640) return -1;
	for (int i = 1; i < snake.length;i++)
	{
		if (snake.dot[i].x == snake.dot[0].x && snake.dot[i].y == snake.dot[0].y) return -1;
	}
}

int main(int argc, char* argv[])
{
	SDL_Init(SDL_INIT_EVERYTHING);
	if (TTF_Init() < 0) cout << TTF_GetError() << endl;
	if (Mix_OpenAudio(44100, MIX_DEFAULT_FORMAT, 2, 2048) < 0) cout << Mix_GetError << endl;
	SDL_Window* window = SDL_CreateWindow("Snake game", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, 1200, 800, SDL_WINDOW_SHOWN);
	SDL_Renderer* renderer = SDL_CreateRenderer(window, -1, 0);
	SDL_Event event;
	
	const int menuItem = 2;
	SDL_Surface* menus[menuItem];
	SDL_Color color[3] = { {255,255,255},{255,0,0}, {100,100,100} };
	TTF_Font* font = TTF_OpenFont("39335_UniversCondensed.ttf", 50);
	SDL_Surface* gameover = TTF_RenderText_Solid(font, "Game Over", color[2]);
	menus[0] = TTF_RenderText_Solid(font, "Play Again", color[0]);
	menus[1] = TTF_RenderText_Solid(font, "Exit", color[0]);
	

	
	Snake snake;
	Food food;
	BigFood bigfood;

	bool game_running = true;
	bool end_running = true;
	bool big_running = true;
    Initialize(snake, food, bigfood);
	
	int i = showMenu(renderer);
	SDL_RenderClear(renderer);

	if (i == -1)
	{
		game_running = false;
		end_running = false;
	}
	A:
		while (game_running)
		{
			while (SDL_PollEvent(&event))
			{
				if (event.type == SDL_QUIT)
				{
					game_running = false;
					end_running = false;
				}
			}
			//LoadBackGroundMusic(bgm);
			SDL_SetRenderDrawColor(renderer, 0, 0, 0, 255);
			SDL_RenderClear(renderer);

			renderScore(renderer, snake.length - 1);
			renderTime(renderer);

			Display(snake, food, bigfood, renderer);
			Move(snake, event);
			if (Handle(snake, food, bigfood, renderer) == -1)
			{
				game_running = false;
			}
			SDL_Delay(2);
		}
		SDL_SetRenderDrawColor(renderer, 0, 0, 0, 255);
		SDL_RenderClear(renderer);

		while (end_running)
		{
			SDL_Surface* score = TTF_RenderText_Solid(font, (("Your score: ") + to_string(snake.length - 1)).c_str(), color[2]);
			while (SDL_PollEvent(&event))
			{
				if (event.type == SDL_QUIT) end_running = false;
				else if (event.type == SDL_MOUSEMOTION)
				{
					if (event.button.x >= 500 && event.button.x <= 650 && event.button.y >= 600 && event.button.y <= 650)
					{
						motionSound();
						menus[0] = TTF_RenderText_Solid(font, "Play Again", color[1]);
					}
					else menus[0] = TTF_RenderText_Solid(font, "Play Again", color[0]);

					if (event.button.x >= 500 && event.button.x <= 575 && event.button.y >= 650 && event.button.y <= 700)
					{
						motionSound();
						menus[1] = TTF_RenderText_Solid(font, "Exit", color[1]);
					}
					else menus[1] = TTF_RenderText_Solid(font, "Exit", color[0]);
				}
				else if (event.type == SDL_MOUSEBUTTONDOWN)
				{
					if (event.button.x >= 500 && event.button.x <= 650 && event.button.y >= 600 && event.button.y <= 650)
					{
						game_running = true;
						Initialize(snake, food, bigfood);
						goto A;
					}

					else if (event.button.x >= 500 && event.button.x <= 575 && event.button.y >= 650 && event.button.y <= 700)
					{
						end_running = false;
					}
				}
			}
			SDL_RenderPresent(renderer);
			SDL_Texture* gameoverMessage = SDL_CreateTextureFromSurface(renderer, gameover);
			SDL_Texture* scoreMessage = SDL_CreateTextureFromSurface(renderer, score);
			SDL_Texture* playagainMessage = SDL_CreateTextureFromSurface(renderer, menus[0]);
			SDL_Texture* exitMessage = SDL_CreateTextureFromSurface(renderer, menus[1]);
			SDL_Rect playagainRect, gameoverRect, scoreRect, exitRect;
			gameoverRect.x = 350;
			gameoverRect.y = 150;
			gameoverRect.w = 500;
			gameoverRect.h = 200;
			scoreRect.x = 470;
			scoreRect.y = 320;
			scoreRect.w = 250;
			scoreRect.h = 100;
			playagainRect.x = 500;
			playagainRect.y = 600;
			playagainRect.w = 150;
			playagainRect.h = 50;
			exitRect.x = 500;
			exitRect.y = 650;
			exitRect.w = 75;
			exitRect.h = 50;

			SDL_RenderCopy(renderer, gameoverMessage, NULL, &gameoverRect);
			SDL_RenderCopy(renderer, scoreMessage, NULL, &scoreRect);
			SDL_RenderCopy(renderer, playagainMessage, NULL, &playagainRect);
			SDL_RenderCopy(renderer, exitMessage, NULL, &exitRect);

		}
	
	

	//Mix_FreeMusic(bgm);
	TTF_Quit();
	SDL_Quit();
	return 0;
}